// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>Terradue.ServiceModel.Ogc.Gml311</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
using Terradue.ServiceModel.W3c.Smil20Lang;
using System.Xml;
using System.Xml.Linq;

namespace Terradue.ServiceModel.Ogc.Gml311
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;

    public static class GmlHelper {

        static XmlSerializer multiPolygonSerializer;
        static XmlSerializer multiCurveSerializer;
        static XmlSerializer multiLineStringSerializer;
        static XmlSerializer nultiSurfaceSerializer;
        static XmlSerializer multiPointSerializer;
        static XmlSerializer linearRingSerializer;
        static XmlSerializer polygonSerializer;
        static XmlSerializer lineStringSerializer;
        static XmlSerializer pointSerializer;

        public static AbstractGeometryType Deserialize(XmlReader reader){

            var node = XElement.Load(reader);
            reader = node.CreateReader();

            if (node.Name.NamespaceName != "http://www.opengis.net/gml")
                throw new FormatException("The xml is not GML");

            if (node.Name.LocalName == "MultiPolygon") {
                return (MultiPolygonType)MultiPolygonSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "MultiCurve") {
                return (MultiCurveType)MultiCurveSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "MultiLineString") {
                return (MultiLineStringType)MultiLineStringSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "MultiSurface") {
                return (MultiSurfaceType)MultiSurfaceSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "MultiPoint") {
                return (MultiPointType)MultiPointSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "LinearRing")
            {
                return (LinearRingType)LinearRingSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "Polygon")
            {
                return (PolygonType)PolygonSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "LineString")
            {
                return (LineStringType)LineStringSerializer.Deserialize(reader);
            }

            if (node.Name.LocalName == "Point")
            {
                return (PointType)PointSerializer.Deserialize(reader);
            }

            throw new NotImplementedException();
        }

        public static void Serialize(XmlWriter writer, AbstractGeometryType gmlObject){

            XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();
            namespaces.Add(string.Empty, string.Empty);
            namespaces.Add("gml", "http://www.opengis.net/gml");

            if (gmlObject is MultiPolygonType) {
                MultiPolygonSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is MultiCurveType) {
                MultiCurveSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is MultiLineStringType) {
                MultiLineStringSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is MultiSurfaceType) {
                MultiSurfaceSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is MultiPointType) {
                MultiPointSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is LinearRingType)
            {
                LinearRingSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is LineStringType)
            {
                LineStringSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is PolygonType)
            {
                PolygonSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            if (gmlObject is PointType)
            {
                PointSerializer.Serialize(writer, gmlObject, namespaces);
                return;
            }

            throw new NotImplementedException();

        }

        public static XmlSerializer MultiPolygonSerializer {
            get {
                if (multiPolygonSerializer == null)
                    multiPolygonSerializer = new XmlSerializer(typeof(MultiPolygonType));
                return multiPolygonSerializer;
            }
        }

        public static XmlSerializer MultiCurveSerializer {
            get {
                if (multiCurveSerializer == null)
                    multiCurveSerializer = new XmlSerializer(typeof(MultiCurveType));
                return multiCurveSerializer;
            }
        }

        public static XmlSerializer MultiLineStringSerializer {
            get {
                if (multiLineStringSerializer == null)
                    multiLineStringSerializer = new XmlSerializer(typeof(MultiLineStringType));
                return multiLineStringSerializer;
            }
        }

        public static XmlSerializer MultiSurfaceSerializer {
            get {
                if (nultiSurfaceSerializer == null)
                    nultiSurfaceSerializer = new XmlSerializer(typeof(MultiSurfaceType));
                return nultiSurfaceSerializer;
            }
        }

        public static XmlSerializer MultiPointSerializer {
            get {
                if (multiPointSerializer == null)
                    multiPointSerializer = new XmlSerializer(typeof(MultiPointType));
                return multiPointSerializer;
            }
        }

        public static XmlSerializer LinearRingSerializer
        {
            get
            {
                if (linearRingSerializer == null)
                    linearRingSerializer = new XmlSerializer(typeof(LinearRingType));
                return linearRingSerializer;
            }
        }

        public static XmlSerializer PolygonSerializer
        {
            get
            {
                if (polygonSerializer == null)
                    polygonSerializer = new XmlSerializer(typeof(PolygonType));
                return polygonSerializer;
            }
        }

        public static XmlSerializer LineStringSerializer
        {
            get
            {
                if (lineStringSerializer == null)
                    lineStringSerializer = new XmlSerializer(typeof(LineStringType));
                return lineStringSerializer;
            }
        }

        public static XmlSerializer PointSerializer
        {
            get
            {
                if (pointSerializer == null)
                    pointSerializer = new XmlSerializer(typeof(PointType));
                return pointSerializer;
            }
        }
    }
    
}
