<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCatalog" xml:space="preserve">
    <value>新增目录</value>
  </data>
  <data name="CantDeleteChildCatalog" xml:space="preserve">
    <value>不能删除子级目录</value>
  </data>
  <data name="CatalogName" xml:space="preserve">
    <value>目录名称</value>
  </data>
  <data name="ChangeAvatar" xml:space="preserve">
    <value>更改头像</value>
  </data>
  <data name="ConfirmOverwriteDupFiles" xml:space="preserve">
    <value>是否覆盖同名文件</value>
  </data>
  <data name="ContentType" xml:space="preserve">
    <value>内容类型</value>
  </data>
  <data name="CopyFile" xml:space="preserve">
    <value>复制文件</value>
  </data>
  <data name="DeleteCatalog" xml:space="preserve">
    <value>删除目录</value>
  </data>
  <data name="DeleteFile" xml:space="preserve">
    <value>删除文件</value>
  </data>
  <data name="DownloadCompleted" xml:space="preserve">
    <value>下载完成</value>
  </data>
  <data name="DownloadFile" xml:space="preserve">
    <value>下载文件</value>
  </data>
  <data name="EditCatalog" xml:space="preserve">
    <value>编辑目录</value>
  </data>
  <data name="FilePropEdit" xml:space="preserve">
    <value>文件属性编辑</value>
  </data>
  <data name="LoadFailedTryAgain" xml:space="preserve">
    <value>加载失败，请重试</value>
  </data>
  <data name="MoveFile" xml:space="preserve">
    <value>移动文件</value>
  </data>
  <data name="PlzEnterCatalogName" xml:space="preserve">
    <value>请输入目录名称</value>
  </data>
  <data name="PlzSelectACatalogToDelete" xml:space="preserve">
    <value>请选择要删除的目录</value>
  </data>
  <data name="PlzSelectACatalogToEdit" xml:space="preserve">
    <value>请先选择一个需要编辑的目录</value>
  </data>
  <data name="PlzSelectACatalogToUpload" xml:space="preserve">
    <value>请先选择一个需要上传的目录</value>
  </data>
  <data name="PlzSelectAFileToDownload" xml:space="preserve">
    <value>请选择要下载的文件</value>
  </data>
  <data name="PlzSelectAPicture" xml:space="preserve">
    <value>请选择一张图片</value>
  </data>
  <data name="PlzSelectImgFile" xml:space="preserve">
    <value>请选择图片文件</value>
  </data>
  <data name="SelectCatalog" xml:space="preserve">
    <value>选择目录</value>
  </data>
  <data name="SystemAvatar" xml:space="preserve">
    <value>系统头像</value>
  </data>
  <data name="UploadFile" xml:space="preserve">
    <value>上传文件</value>
  </data>
</root>